/**
 * Provides utilites that allow a component to easily declare an automatically
 * handled dependency on asynchronously fetched data. Sorta like a poor man's
 * Relay, except way worse. The default export is a decorator that can be used
 * to attach a data-fetching function to a component. The function is provided
 * with the Redux store and should return a promise. It will be called when
 * appropriate on the server or the client. Note that the function is not
 * necessarily called in the context of the component, so attempts to access the
 * component through "this" should be avoided. The data-fetching function should
 * obtain any necessary information from the application state. This is mostly
 * ripped from https://github.com/erikras/react-redux-universal-hot-example.
 *
 * @module
 */

import React, { Component, PropTypes } from 'react';

/**
 * Extracts the static fetchData() method from a component that may have been
 * wrapped by another component via ReactRouter.
 *
 * @param {Object} The React component
 *
 * @returns {Function}
 */
function getFetchDataFromComponent (component) {
  return component.WrappedComponent ? getFetchDataFromComponent(component.WrappedComponent) : component.fetchData;
}

/**
 * Calls the static fetchData() method generated by @requireData on each
 * component in a given list
 *
 * @param {Object[]} React components
 * @param {Object} The Redux store
 *
 * @returns {Array} The promises that resulted from calling fetchData()
 */
function getPromisesFromComponents (components, store) {
  return components
    .filter( (component) => getFetchDataFromComponent(component) )
    .map(getFetchDataFromComponent)
    .map( (fetchData) => fetchData(store) );
}

/**
 * Gathers all the promises from getPromisesFromComponents() together into
 * a single promise that will resolve when all data has been fetched
 *
 * @param {Object[]} React components
 * @param {Object} The Redux store
 *
 * @returns {Object} A promise that will resolve when data has been fetched for
 * all the given components
 */
export function fetchDataForComponents (components, store) {
    return Promise.all(getPromisesFromComponents(components, store));
}

/**
 * A decorator that takes a data fetching function and a) assigns the function
 * to a static property on the decorated component, b) uses React contexts to
 * grab the Redux store, and c) calls the data fetching function in
 * componentDidMount, passing the store to it.
 *
 * @param {Object} The data fetching function (this should return a promise)
 *
 * @returns {Function} The decorating function
 */
export default function requireData (fetchData) {
  return function compose(OriginalComponent) {

    class ComposedComponent extends Component {

      static contextTypes = {
        store: React.PropTypes.object
      }

      static fetchData = fetchData

      componentDidMount () {
        ComposedComponent.fetchData(this.context.store);
      }

      render () {
        return <OriginalComponent {...this.props} />;
      }
    }

    return ComposedComponent;
  };
}